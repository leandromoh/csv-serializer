<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	string[] types = {
		"Byte",
		"SByte",
		"Int16",
		"UInt16",
		"Int32",
		"UInt32",
		"Int64",
		"UInt64",
		"Single",
		"Double",
		"Decimal"
	};
#>
using Missil;
using System;
using System.Globalization;
using System.Reflection.Emit;
using System.Text;

namespace Csv.Internal.Converters {
<# foreach(string type in types) { #>
	/***************************************
	 | THIS CLASS WAS AUTO GENERATED USING |
	 | NumberConverters.tt TEXT TEMPLATE.  |
	 | DO NOT MODIFY THIS CLASS!!!         |
	 ***************************************/
	internal class <#= type #>Converter : INativeConverter<<#= type #>> {
		public void AppendToStringBuilder(StringBuilder stringBuilder, IFormatProvider provider, <#= type #> value, CsvColumnAttribute? attribute, char delimiter) {
<# if (type == "Single" || type == "Double" || type == "Decimal") { #>
			string text = value.ToString(provider);
			if (text.Contains(delimiter)) {
				stringBuilder.Append('"').Append(text).Append('"');
			} else {
				stringBuilder.Append(text);
			}
<# } else { #>
			stringBuilder.Append(value);
<# } #>
		}

		public <#= type #> Deserialize(ReadOnlyMemory<char> text, IFormatProvider provider, CsvColumnAttribute? attribute) {
			return <#= type #>.Parse(text.Span, provider: provider);
		}

<# if (type == "Single" || type == "Double" || type == "Decimal") { #>
		/// <param name="local">A local of type <see cref="<#= type #>"/></param>
		[ConverterEmitter(typeof(<#= type #>))]
		public void EmitAppendToStringBuilder(ILGenerator gen, LocalBuilder? local, LocalBuilder? _, CsvColumnAttribute? attribute) => gen
			.Stloc(local!)
			.Ldloca(local!)
			.Ldarg_1()
			.Call<<#= type #>>("ToString", typeof(IFormatProvider))
			.Dup()
			.Ldarg_2()
			.Callvirt<string>("Contains", typeof(char))
			.Brfalse_S(out Label @else)
				.Ldc_I4_X((int)'"')
				.Call<StringBuilder>("Append", typeof(char))
				.Call<StringBuilder>("Append", typeof(string))
				.Ldc_I4_X((int)'"')
				.Call<StringBuilder>("Append", typeof(char))
				.Br_S(out Label endif)
			.Label(@else)
				.Call<StringBuilder>("Append", typeof(string))
			.Label(endif);
<# } else { #>
		[ConverterEmitter]
		public void EmitAppendToStringBuilder(ILGenerator gen, LocalBuilder? _, LocalBuilder? __, CsvColumnAttribute? attribute) => gen
			.Call<StringBuilder>("Append", typeof(<#= type #>));
<# } #>

		[ConverterEmitter]
		public void EmitDeserialize(ILGenerator gen, LocalBuilder? _, LocalBuilder? __, CsvColumnAttribute? attribute) => gen
			.CallPropertyGet<ReadOnlyMemory<char>>("Span")
<# if (type == "Single" || type == "Double") { #>
			.Ldc_I4_X((int)NumberStyles.Float)
<# } else if (type == "Decimal") { #>
			.Ldc_I4_X((int)NumberStyles.Currency)
<# } else { #>
			.Ldc_I4_X((int)NumberStyles.Integer)
<# } #>
			.Ldarg_1()
			.Call<<#= type #>>("Parse", typeof(ReadOnlySpan<char>), typeof(NumberStyles), typeof(IFormatProvider));
	}

	/***************************************
	 | THIS CLASS WAS AUTO GENERATED USING |
	 | NumberConverters.tt TEXT TEMPLATE.  |
	 | DO NOT MODIFY THIS CLASS!!!         |
	 ***************************************/
	internal class Nullable<#= type #>Converter : INativeConverter<<#= type #>?> {
		public void AppendToStringBuilder(StringBuilder stringBuilder, IFormatProvider provider, <#= type #>? value, CsvColumnAttribute? attribute, char delimiter) {
			if (value.HasValue) {
<# if (type == "Single" || type == "Double" || type == "Decimal") { #>
				string text = value.Value.ToString(provider);
				if (text.Contains(delimiter)) {
					stringBuilder.Append('"').Append(text).Append('"');
				} else {
					stringBuilder.Append(text);
				}
<# } else { #>
				stringBuilder.Append(value.Value);
<# } #>
			}
		}

		public <#= type #>? Deserialize(ReadOnlyMemory<char> text, IFormatProvider provider, CsvColumnAttribute? attribute) {
			if (text.Length == 0) {
				return null;
			} else {
				return <#= type #>.Parse(text.Span, provider: provider);
			}
		}


		/// <param name="local">A local of type <see cref="Nullable{<#= type #>}"/></param>
<# if (type == "Single" || type == "Double" || type == "Decimal") { #>
		/// <param name="secondaryLocal">A local of type <see cref="<#= type #>"/></param>
		[ConverterEmitter(typeof(<#= type #>?), typeof(<#= type #>))]
<# } else { #>
		[ConverterEmitter(typeof(<#= type #>?))]
<# } #>
		public void EmitAppendToStringBuilder(ILGenerator gen, LocalBuilder? local, LocalBuilder? secondaryLocal, CsvColumnAttribute? attribute) => gen
			.Stloc(local!)
			.Ldloca(local!)
			.CallvirtPropertyGet<<#= type #>?>("HasValue")
			.Brfalse_S(out Label @endif)
<# if (type == "Single" || type == "Double" || type == "Decimal") { #>
				.Ldloca(local!)
				.CallPropertyGet<<#= type #>?>("Value")
				.Stloc(secondaryLocal!)
				.Ldloca(secondaryLocal!)
				.Ldarg_1()
				.Call<<#= type #>>("ToString", typeof(IFormatProvider))
				.Dup()
				.Ldarg_2()
				.Callvirt<string>("Contains", typeof(char))
				.Brfalse_S(out Label @else)
					.Ldc_I4_X((int)'"')
					.Call<StringBuilder>("Append", typeof(char))
					.Call<StringBuilder>("Append", typeof(string))
					.Ldc_I4_X((int)'"')
					.Call<StringBuilder>("Append", typeof(char))
					.Br_S(@endif)
				.Label(@else)
					.Call<StringBuilder>("Append", typeof(string))
<# } else { #>
				.Ldloca(local!)
				.CallPropertyGet<<#= type #>?>("Value")
				.Callvirt<StringBuilder>("Append", typeof(<#= type #>))
<# } #>
			.Label(@endif);

		/// <param name="local">A local of type <see cref="Nullable{<#= type #>}"/></param>
		[ConverterEmitter(typeof(<#= type #>?))]
		public void EmitDeserialize(ILGenerator gen, LocalBuilder? local, LocalBuilder? _, CsvColumnAttribute? attribute) => gen
			.Dup()
			.CallPropertyGet<ReadOnlyMemory<char>>("Length")
			.Brfalse_S(out Label @else)
				.CallPropertyGet<ReadOnlyMemory<char>>("Span")
<# if (type == "Single" || type == "Double") { #>
				.Ldc_I4_X((int)NumberStyles.Float)
<# } else if (type == "Decimal") { #>
				.Ldc_I4_X((int)NumberStyles.Currency)
<# } else { #>
				.Ldc_I4_X((int)NumberStyles.Integer)
<# } #>
				.Ldarg_1()
				.Call<<#= type #>>("Parse", typeof(ReadOnlySpan<char>), typeof(NumberStyles), typeof(IFormatProvider))
				.Newobj<<#= type #>?>(typeof(<#= type #>))
				.Stloc(local!)
				.Br_S(out Label @endif)
			.Label(@else)
				.Pop()
				.Ldloca(local!)
				.Initobj<<#= type #>?>()
			.Label(@endif)
			.Ldloc(local!);
	}

<# } #>
}